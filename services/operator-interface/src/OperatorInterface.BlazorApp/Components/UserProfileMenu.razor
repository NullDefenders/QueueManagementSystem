@using MediatR
@using OperatorInterface.Core.Application.UseCases.Commands.CloseOperatorSession
@inject IMediator Mediator

@inherits AuthenticatedPageComponent
@rendermode InteractiveServer

<button class="btn btn-outline-light btn-sm" @onclick="HandleLogout" disabled="@isLoggingOut">
    @if (isLoggingOut)
    {
        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
    }
    <i class="bi bi-box-arrow-right"></i> Выйти
</button>

@code {
    private bool isLoggingOut = false;

    private async Task HandleLogout()
    {
        if (isLoggingOut) return;

        isLoggingOut = true;
        StateHasChanged();

        try
        {
            if (SessionStorage.CurrentSessionId != null)
            {
                // Пытаемся корректно закрыть сессию
                await Mediator.Send(new CloseOperatorSessionCommand(SessionStorage.CurrentSessionId));
            }
        }
        catch
        {
            // Игнорируем ошибки при logout - все равно очищаем сессию
        }
        finally
        {
            SessionStorage.Clear();
            isLoggingOut = false;
            Navigation.NavigateTo("/login", replace: true);
        }
    }
    
    protected override async Task OnSessionReadyAsync()
    {
        if (SessionStorage.CurrentSessionId != null)
        {
        }
    }
}