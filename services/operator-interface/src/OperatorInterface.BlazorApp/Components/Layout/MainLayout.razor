@using OperatorInterface.BlazorApp.Services
@using OperatorInterface.Core.Domain.SharedKernel
@inherits LayoutComponentBase
@implements IDisposable
@inject SessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject NotificationService NotificationService


<div class="d-flex flex-column min-vh-100">
    
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <i class="bi bi-people-fill"></i> Интерфейс оператора
            </a>
            
            <UserProfileMenu />
        </div>
    </nav>

    <main class="flex-fill container-fluid py-4">
        @Body
    </main>

    <footer class="bg-light border-top py-3 mt-auto">
        <div class="container text-center">
            <small class="text-muted">© 2025 Система управления очередями. Версия 0.1</small>
        </div>
    </footer>

    <div class="notification-container">
        @if (!string.IsNullOrEmpty(currentNotification))
        {
            <div class="alert @GetNotificationClass() alert-dismissible fade show" role="alert">
                @currentNotification
                <button type="button" class="btn-close" @onclick="ClearNotification"></button>
            </div>
        }
    </div>
</div>

<style>
    .notification-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }
</style>

@code {
    private string currentNotification = string.Empty;
    private NotificationType currentNotificationType = NotificationType.Info;
    private bool IsSessionReady = false;
    
    protected override async Task OnInitializedAsync()
    {
        SessionStorage.OnSessionChanged += OnSessionChanged;
        NotificationService.OnNotification += OnNotificationReceived;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SessionStorage.InitializeAfterRenderAsync();
            IsSessionReady = true;
            StateHasChanged();
        }
    }

    private void OnSessionChanged(SessionId? sessionId)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnNotificationReceived(string message, NotificationType type)
    {
        currentNotification = message;
        currentNotificationType = type;
        InvokeAsync(StateHasChanged);

        // Auto-hide notification after 5 seconds
        Task.Delay(5000).ContinueWith(_ =>
        {
            currentNotification = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }

    private string GetNotificationClass()
    {
        return currentNotificationType switch
        {
            NotificationType.Success => "alert-success",
            NotificationType.Error => "alert-danger",
            NotificationType.Warning => "alert-warning",
            NotificationType.Info => "alert-info",
            _ => "alert-info"
        };
    }

    private void ClearNotification()
    {
        currentNotification = string.Empty;
        StateHasChanged();
    }

    private async Task HandleLogout()
    {
        try
        {
            //SessionStorage.Clear();
            Navigation.NavigateTo("/logout", true);
        }
        catch (Exception)
        {
            // Ignore errors during logout
        }
    }

    public void Dispose()
    {
        SessionStorage.OnSessionChanged -= OnSessionChanged;
        NotificationService.OnNotification -= OnNotificationReceived;
    }
}