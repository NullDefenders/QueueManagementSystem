@using OperatorInterface.Core.Domain.SharedKernel
@using OperatorInterface.Queries.UseCases.Shared
<div class="card">
    <div class="card-header">
        <h6 class="card-title mb-0">
            <i class="bi bi-gear-fill"></i> Управление
        </h6>
    </div>
    <div class="card-body">
        <div class="d-grid gap-3">
            @switch (Session.Status)
            {
                case SessionStatus.Authorized:
                    <button type="button"
                            class="btn btn-success btn-lg"
                            @onclick="HandleStartWork"
                            disabled="@IsLoading">
                        @if (IsLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"
                                  role="status"
                                  aria-hidden="true"></span>
                        }
                        <i class="bi bi-play-fill"></i> Начать работу
                    </button>
                    break;

                case SessionStatus.ReadyToWork:
                    <button type="button"
                            class="btn btn-primary btn-lg"
                            @onclick="HandleRequestClient"
                            disabled="@IsLoading">
                        @if (IsLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"
                                  role="status"
                                  aria-hidden="true"></span>
                        }
                        <i class="bi bi-person-plus-fill"></i> Готов принять клиента
                    </button>
                    break;

                case SessionStatus.WaitingAssignment:
                    <div class="alert alert-info d-flex align-items-center mb-0" role="alert">
                        <div class="spinner-border spinner-border-sm me-2"
                             role="status"
                             aria-hidden="true"></div>
                        <div>
                            <i class="bi bi-clock"></i>
                            Ожидание назначения клиента системой очереди...
                        </div>
                    </div>
                    break;

                case SessionStatus.WaitingClient:
                    <div class="d-grid gap-2">
                        <button type="button"
                                class="btn btn-success"
                                @onclick="HandleStartClientSession"
                                disabled="@IsLoading">
                            @if (IsLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"
                                      role="status"
                                      aria-hidden="true"></span>
                            }
                            <i class="bi bi-play-fill"></i> Начать обслуживание
                        </button>

                        <button type="button"
                                class="btn btn-warning"
                                @onclick="HandleMarkClientNotCame"
                                disabled="@IsLoading">
                            @if (IsLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"
                                      role="status"
                                      aria-hidden="true"></span>
                            }
                            <i class="bi bi-person-x-fill"></i> Клиент не подошел
                        </button>
                    </div>

                    @if (Session.CurrentClientSession != null)
                    {
                        <div class="alert alert-info d-flex align-items-center mb-0" role="alert">
                            <i class="bi bi-ticket-perforated-fill me-2"></i>
                            <div>
                                <strong>Назначен клиент:</strong>
                                <span class="badge bg-primary ms-1">@Session.CurrentClientSession.TicketNumber</span>
                                <br>
                                <small class="text-muted">
                                    Время назначения: @Session.CurrentClientSession.AssignmentTime.ToString("HH:mm:ss")
                                </small>
                            </div>
                        </div>
                    }
                    break;

                case SessionStatus.ServingClient:
                    <button type="button"
                            class="btn btn-success btn-lg"
                            @onclick="HandleCompleteClientSession"
                            disabled="@IsLoading">
                        @if (IsLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"
                                  role="status"
                                  aria-hidden="true"></span>
                        }
                        <i class="bi bi-check-circle-fill"></i> Завершить обслуживание
                    </button>

                    @if (Session.CurrentClientSession != null)
                    {
                        <div class="alert alert-success d-flex align-items-center mb-0" role="alert">
                            <i class="bi bi-person-check-fill me-2"></i>
                            <div class="flex-grow-1">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>Обслуживается клиент:</strong>
                                        <span class="badge bg-success ms-1">@Session.CurrentClientSession.TicketNumber</span>
                                    </div>
                                    @if (Session.CurrentClientSession.ServiceStartTime.HasValue)
                                    {
                                        <small class="text-muted">
                                            @GetServiceDuration()
                                        </small>
                                    }
                                </div>
                                @if (Session.CurrentClientSession.ServiceStartTime.HasValue)
                                {
                                    <small class="text-muted">
                                        Начало: @Session.CurrentClientSession.ServiceStartTime.Value.ToString("HH:mm:ss")
                                    </small>
                                }
                            </div>
                        </div>
                    }
                    break;
            }

            @if (Session.Status != SessionStatus.ServingClient)
            {
                <hr class="my-3">
                <button type="button"
                        class="btn btn-outline-danger"
                        @onclick="HandleCloseSession"
                        disabled="@IsLoading"
                        data-bs-toggle="tooltip"
                        data-bs-placement="top"
                        title="Завершить рабочую смену">
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2"
                              role="status"
                              aria-hidden="true"></span>
                    }
                    <i class="bi bi-power"></i> Завершить смену
                </button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public OperatorSessionDto Session { get; set; } = default!;

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public EventCallback OnStartWork { get; set; }

    [Parameter]
    public EventCallback OnRequestClient { get; set; }

    [Parameter]
    public EventCallback OnStartClientSession { get; set; }

    [Parameter]
    public EventCallback OnCompleteClientSession { get; set; }

    [Parameter]
    public EventCallback OnMarkClientNotCame { get; set; }

    [Parameter]
    public EventCallback OnCloseSession { get; set; }

    private async Task HandleStartWork()
    {
        if (!IsLoading)
        {
            await OnStartWork.InvokeAsync();
        }
    }

    private async Task HandleRequestClient()
    {
        if (!IsLoading)
        {
            await OnRequestClient.InvokeAsync();
        }
    }

    private async Task HandleStartClientSession()
    {
        if (!IsLoading)
        {
            await OnStartClientSession.InvokeAsync();
        }
    }

    private async Task HandleCompleteClientSession()
    {
        if (!IsLoading)
        {
            await OnCompleteClientSession.InvokeAsync();
        }
    }

    private async Task HandleMarkClientNotCame()
    {
        if (!IsLoading)
        {
            await OnMarkClientNotCame.InvokeAsync();
        }
    }

    private async Task HandleCloseSession()
    {
        if (!IsLoading)
        {
            await OnCloseSession.InvokeAsync();
        }
    }

    private string GetServiceDuration()
    {
        if (Session.CurrentClientSession?.ServiceStartTime == null)
            return string.Empty;

        var duration = DateTime.Now - Session.CurrentClientSession.ServiceStartTime.Value;

        if (duration.TotalHours >= 1)
            return $"{duration.Hours}ч {duration.Minutes}м";

        if (duration.TotalMinutes >= 1)
            return $"{duration.Minutes}м {duration.Seconds}с";

        return $"{duration.Seconds}с";
    }
}