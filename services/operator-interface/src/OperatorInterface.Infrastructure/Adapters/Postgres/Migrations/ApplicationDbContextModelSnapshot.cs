// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OperatorInterface.Infrastructure.Adapters.Postgres;

#nullable disable

namespace OperatorInterface.Infrastructure.Adapters.Postgres.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OperatorInterface.Core.Domain.Model.ClientSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AssignmentTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assignment_time");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Guid>("OperatorSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("operator_session_id");

                    b.Property<string>("Result")
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ticket_number");

                    b.HasKey("Id");

                    b.HasIndex("OperatorSessionId");

                    b.ToTable("client_sessions", (string)null);
                });

            modelBuilder.Entity("OperatorInterface.Core.Domain.Model.OperatorSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("OperatorId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("operator_id");

                    b.Property<DateTime?>("SessionEndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("session_end_time");

                    b.Property<DateTime?>("SessionStartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("session_start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("WorkplaceCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("workplace_code");

                    b.HasKey("Id");

                    b.ToTable("operator_sessions", (string)null);
                });

            modelBuilder.Entity("OperatorInterface.Core.Domain.Model.ClientSession", b =>
                {
                    b.HasOne("OperatorInterface.Core.Domain.Model.OperatorSession", null)
                        .WithMany("ClientSessions")
                        .HasForeignKey("OperatorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OperatorInterface.Core.Domain.Model.OperatorSession", b =>
                {
                    b.OwnsMany("OperatorInterface.Core.Domain.SharedKernel.ServiceInfo", "AssignedServices", b1 =>
                        {
                            b1.Property<Guid>("OperatorSessionId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("ServiceCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ServiceName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OperatorSessionId", "__synthesizedOrdinal");

                            b1.ToTable("operator_sessions");

                            b1.ToJson("assigned_services");

                            b1.WithOwner()
                                .HasForeignKey("OperatorSessionId");
                        });

                    b.Navigation("AssignedServices");
                });

            modelBuilder.Entity("OperatorInterface.Core.Domain.Model.OperatorSession", b =>
                {
                    b.Navigation("ClientSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
